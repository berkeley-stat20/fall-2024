---
title: "Taxonomy of Data"
format: stat20slides-revealjs
---

# Concept Questions

There's no escape from the bird...

## {data-menu-title="Shoebill Pic 1" background-image="images/shoebill-1.png" background-size="contain"}


## Images as data

:::: {.columns}

::: {.column width="55%" .incremental}
- Images are composed of pixels (this image is 1520 by 1012)
- The color in each pixel is in RGB
  
  ![](images/rgb.png){width="460"}

- Each band takes a value from 0-255
- This image is data with 1520 x 1012 x 3 values.
:::

::: {.column width="45%"}
![](images/shoebill-1.png){fig-alt="A shoebill with a duck in its mouth." width="800"}
:::

::::


## Grayscale

:::: {.columns}

::: {.column width="55%" .incremental}
- Grayscale images have only one band
- 0 is black, 255 is white
- This image is data with 1520 x 1012 x 1 values.

:::

::: {.column width="45%"}
![](images/shoebill-1-grayscale.png){fig-alt="A shoebill with a duck in its mouth in grayscale." width="800"}
:::

::::

## Grayscale

:::: {.columns}

-  To simplify, assume our photos are 8 x 8 grayscale images.


::: {.column width="45%"}
![](images/shoebill-1-gray8.png){fig-alt="An 8 x 8 grayscale image" width="500"}
:::

::::

## Images in a Data Frame

Consider the following images which are our data:

:::: {.columns}

::: {.column width="33%"}
![](images/shoebill-1.png)
:::

::: {.column width="33%"}
![](images/shoebill-2.png)
:::

::: {.column width="34%"}
![](images/shoebill-3.png)
:::


:::{.incremental}

- Let's simplify them to 8 x 8 grayscale images

:::

::::


## Images in a Data Frame



:::: {.columns}

::: {.column width="33%"}
![](images/shoebill-1-gray8.png)
:::

::: {.column width="33%"}
![](images/shoebill-2-gray8.png)
:::

::: {.column width="34%"}
![](images/shoebill-3-gray8.png)
:::

::::


:::{.poll}
If you were to put the data from these (8 x 8 grayscale) images into a *data frame*, what would the dimensions of that data frame be in rows x columns? Answer at `pollev.com`.
:::

. . . 

{{< countdown "1:00" >}}

# Concept Question

## A note on variables

There are three things that "variable" could be referring to:

:::incremental
1. a *phenomenon*
2. how the phenomenon is being *recorded or measured* into data
   - what values can it take? (this is often an intent- or value-laden exercise!)
   - for numerical units, what unit should we express it in?
3. How the recorded data is being *analyzed*
   - might you bin/discretizing income data? what are the consequences of this?
:::

. . . 

-   For the following question, you may work under the *second definition*. 

## What type of variable is age?

For each of the following scenarios where age could be a variable, choose the most appropriate taxonomy according to the Taxonomy of Data.

. . . 

1. Ages of television audiences/demographics
2. Ages of UC Berkeley students
3. The age of a rock

. . . 

:::{.poll}
Answer at `pollev.com`.
:::

{{< countdown "1:00" >}}


# Problem Set 1: *Taxonomy of Data*

{{< countdown "20:00" >}}

# Break

{{< countdown "5:00" >}}

# R Workshop

- Time to make a series of educated guesses. *Close your laptops*! 

## Educated Guess 1

:::{.poll}
What will happen here?

\

Answer at `pollev.com/<name>`
:::

\

```{r eval = FALSE, echo = TRUE, error = TRUE}
1 + "one"
```

{{< countdown "1:00" >}}

:::{.notes}
- "one" is a string with no link at all to the number 1
- without that link, without two objects that are recognized for their numerical value, `+` doesn't work.
:::

## Educated Guess 2

:::{.poll}
What will happen here?

\

Answer at `pollev.com/<name>`
:::

\

```{r}
#| eval: false
#| echo: true

a <- c(1, 2, 3, 4)
sqrt(log(a))
```

{{< countdown "1:00" >}}

:::{.notes}
Talking points
- a is a vector of length four
- log and sqrt are functions that will return vectors of length four
- they're nested and will be evaluated from the inside out
:::


## Educated Guess 3

:::{.poll}
What will happen here?

\

Answer at `pollev.com/<name>`
:::

\

```{r}
#| eval: false
#| echo: true

a <- 1 + 2
a + 1
```

{{< countdown "1:00" >}}

:::{.notes}
- a is a not a string, it's the name of an object that's a number
- to overwrite a with `a + 1` requires re-assigning it to a: `a <- a + 1` (in some languages, `a + 1` would change the value of a)
- `a <- a + 1` is a good time to mention that while `a = a + 1` works in R and they might see it online, its convention to use <- for many reasons including that mathematically the statement with = is confusing.
:::

## Educated Guess 4

:::{.poll}
What will happen here?

\

Answer at `pollev.com/<name>`
:::

\

```{r}
#| eval: false
#| echo: true
#| error: true

a <- c(1, 3.14, "seven")
class(a)
```

{{< countdown "1:00" >}}

:::{.notes}
- the definition of a vector requires every element to be of the same type
- based on their reading, there are three classes that they're familiar with: numeric, factor, and character
- there's no way to translate "seven" into 7, so instead 1 and 3.14 must be translated into strings
- they will likely encounter this when looking at a data set in R (or other languages) and finding that vectors with what looked like numbers are stored as strings. This usually happens because there's a single errant character that the language doesn't know how to parse as a number.
:::

## Functions on vectors

A *vector* is the simplest structure used in R to store data. It can be created using the function `c()`.

```{r}
#| echo: true
my_vector <- c(1, 3, 4)
my_vector
```

. . .

A *function* operates on an R object and produces output. R has many of the mathematical functions that you would expect.

```{r}
#| echo: true
sum(my_vector)
```


## Your Turn

:::{.poll}
1. Create a vector named `vec` with the even integers between 1 and 10 as well as the number 99 (six elements total).

2. Find the sum of that vector.

3. Find the max of that vector.

4. Take the mean of that vector and round it to the nearest integer.
:::

These should all be solved with R code. If you don't know the name of a function to use, with hazard a guess by looking for a help file (e.g. `?sum`) or google it.

{{< countdown "5:00" >}}
  
:::{.notes}
vec <- c(2, 4, 6, 8, 10, 99)
sum(vec)
max(vec)
?round
round(mean(vec))
:::

## Working in a qmd file

Working in a new .qmd file allows you to save your code for later.

**Demo**

1. Create a new qmd file from the RStudio menu, name it, and save it.
2. Insert a new code cell.
3. Write your code into the cell.
4. Render the document.


## Building a data frame

You can combine vectors into a data frame using `data.frame()`[^1]

```{r echo = TRUE}
bill_depth_mm <- c(15.0, 17.1, 18.7, 18.9)
bill_length_mm <- c(47.5, 40.2, 39.0, 35.3)
species <- c("Gentoo", "Adelie", "Adelie", "Adelie")
```

\

. . .

```{r echo = TRUE}
penguins_df <- data.frame(bill_depth_mm, bill_length_mm, species)
penguins_df
```

[^1]: You can also use the `tibble()` function from the `tidyverse` package.


## Your Turn

:::{.poll}
1. Create a new .qmd file, name it, and save it.

2. Insert a new code cell.

2. Create three vectors, `name`, `hometown`, and `sibs_and_pets` that contain observations on those variables from 6 people in this class.

3. Combine them into a data frame called `my_classmates`.
:::

{{< countdown "6:00" >}}
